{"version":3,"sources":["views/CustomerManagementList/components/Header/Header.js","views/CustomerManagementList/components/Results/Results.js","views/CustomerManagementList/CustomerManagementList.js","views/CustomerManagementList/index.js"],"names":["useStyles","makeStyles","root","Header","props","className","rest","Object","objectWithoutProperties","classes","react_default","a","createElement","assign","clsx","Grid","alignItems","container","justify","spacing","item","Typography","component","gutterBottom","variant","Button","color","theme","content","padding","inner","minWidth","nameCell","display","avatar","height","width","marginRight","actions","justifyContent","Results","customers","_useState","useState","_useState2","slicedToArray","selectedCustomers","_useState3","_useState4","page","setPage","_useState5","_useState6","rowsPerPage","setRowsPerPage","length","Math","ceil","Card","CardHeader","action","components","title","Divider","CardContent","lib_default","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","customer","hover","key","id","selected","indexOf","Avatar","src","getInitials","name","Link","RouterLink","to","email","size","CardActions","TablePagination","count","onChangePage","event","onChangeRowsPerPage","target","value","rowsPerPageOptions","defaultProps","results","marginTop","CustomerManagementList","setCustomers","useEffect","mounted","axios","get","then","response","data","components_Header_Header","onFilter","onSearch","components_Results_Results","__webpack_require__","d","__webpack_exports__","views_CustomerManagementList_CustomerManagementList"],"mappings":"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","file":"static/js/29.de88106c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst Header = props => {\r\n  const { className, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <Grid\r\n        alignItems=\"flex-end\"\r\n        container\r\n        justify=\"space-between\"\r\n        spacing={3}\r\n      >\r\n        <Grid item>\r\n          <Typography\r\n            component=\"h2\"\r\n            gutterBottom\r\n            variant=\"overline\"\r\n          >\r\n            Management\r\n          </Typography>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h3\"\r\n          >\r\n            Currnt Care Plan(13)\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n          >\r\n            Add customer\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  Divider,\r\n  Button,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\n\r\nimport getInitials from 'utils/getInitials';\r\nimport { ReviewStars, GenericMoreButton, TableEditBar } from 'components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  content: {\r\n    padding: 0\r\n  },\r\n  inner: {\r\n    minWidth: 700\r\n  },\r\n  nameCell: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    height: 42,\r\n    width: 42,\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(1),\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst Results = props => {\r\n  const { className, customers, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleSelectAll = event => {\r\n    const selectedCustomers = event.target.checked\r\n      ? customers.map(customer => customer.id)\r\n      : [];\r\n\r\n    setSelectedCustomers(selectedCustomers);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedCustomers.indexOf(id);\r\n    let newSelectedCustomers = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(selectedCustomers, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(\r\n        selectedCustomers.slice(1)\r\n      );\r\n    } else if (selectedIndex === selectedCustomers.length - 1) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(\r\n        selectedCustomers.slice(0, -1)\r\n      );\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(\r\n        selectedCustomers.slice(0, selectedIndex),\r\n        selectedCustomers.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedCustomers(newSelectedCustomers);\r\n  };\r\n\r\n  const handleChangePage = (event, page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <Typography\r\n        color=\"textSecondary\"\r\n        gutterBottom\r\n        variant=\"body2\"\r\n      >\r\n        {customers.length} Records found. Page {page + 1} of{' '}\r\n        {Math.ceil(customers.length / rowsPerPage)}\r\n      </Typography>\r\n      <Card>\r\n        <CardHeader\r\n          action={<GenericMoreButton />}\r\n          title=\"All customers\"\r\n        />\r\n        <Divider />\r\n        <CardContent className={classes.content}>\r\n          <PerfectScrollbar>\r\n            <div className={classes.inner}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {/* <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={selectedCustomers.length === customers.length}\r\n                        color=\"primary\"\r\n                        indeterminate={\r\n                          selectedCustomers.length > 0 &&\r\n                          selectedCustomers.length < customers.length\r\n                        }\r\n                        onChange={handleSelectAll}\r\n                      />\r\n                    </TableCell> */}\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Banding</TableCell>\r\n                    <TableCell>Authority</TableCell>\r\n                    <TableCell>Food Allergies</TableCell>\r\n                    <TableCell>Medical Allergies</TableCell>\r\n                    <TableCell>Max Blood</TableCell>\r\n                    <TableCell align=\"right\">Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                \r\n                <TableBody>\r\n                  {customers.slice(0, rowsPerPage).map(customer => (\r\n                    <TableRow\r\n                      hover\r\n                      key={customer.id}\r\n                      selected={selectedCustomers.indexOf(customer.id) !== -1}\r\n                    >\r\n                      {/* <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={\r\n                            selectedCustomers.indexOf(customer.id) !== -1\r\n                          }\r\n                          color=\"primary\"\r\n                          onChange={event =>\r\n                            handleSelectOne(event, customer.id)\r\n                          }\r\n                          value={selectedCustomers.indexOf(customer.id) !== -1}\r\n                        />\r\n                      </TableCell> */}\r\n                      <TableCell>\r\n                        <div className={classes.nameCell}>\r\n                          <Avatar\r\n                            className={classes.avatar}\r\n                            src={customer.avatar}\r\n                          >\r\n                            {getInitials(customer.name)}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Link\r\n                              color=\"inherit\"\r\n                              component={RouterLink}\r\n                              to=\"/service/user\"\r\n                              variant=\"h6\"\r\n                            >\r\n                              Mohammed hassan\r\n                              {/* {customer.name} */}\r\n                            </Link>\r\n                            <div>{customer.email}</div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>9</TableCell>\r\n                      <TableCell>\r\n                        leicester\r\n                      </TableCell>\r\n                      <TableCell>None</TableCell>\r\n                      <TableCell>Pencilin</TableCell>\r\n                      <TableCell>\r\n                        90\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          component={RouterLink}\r\n                          size=\"small\"\r\n                          to=\"/management/customers/1\"\r\n                          variant=\"outlined\"\r\n                        >\r\n                          View\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n             \r\n              <TableBody>\r\n                  {customers.slice(0, rowsPerPage).map(customer => (\r\n                    <TableRow\r\n                      hover\r\n                      key={customer.id}\r\n                      selected={selectedCustomers.indexOf(customer.id) !== -1}\r\n                    >\r\n                      {/* <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={\r\n                            selectedCustomers.indexOf(customer.id) !== -1\r\n                          }\r\n                          color=\"primary\"\r\n                          onChange={event =>\r\n                            handleSelectOne(event, customer.id)\r\n                          }\r\n                          value={selectedCustomers.indexOf(customer.id) !== -1}\r\n                        />\r\n                      </TableCell> */}\r\n                       <Link to=\"/service/user\">\r\n                      <TableCell>\r\n                        <div className={classes.nameCell}>\r\n                          <Avatar\r\n                            className={classes.avatar}\r\n                            src={customer.avatar}\r\n                          >\r\n                            {getInitials(customer.name)}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Link\r\n                              color=\"inherit\"\r\n                              component={RouterLink}\r\n                              to=\"/management/customers/1\"\r\n                              variant=\"h6\"\r\n                            >\r\n                              Mohammed hassan\r\n                              {/* {customer.name} */}\r\n                            </Link>\r\n                            <div>{customer.email}</div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      </Link>\r\n                      <TableCell>9</TableCell>\r\n                      <TableCell>\r\n                        leicester\r\n                      </TableCell>\r\n                      <TableCell>None</TableCell>\r\n                      <TableCell>Pencilin</TableCell>\r\n                      <TableCell>\r\n                        90\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          component={RouterLink}\r\n                          size=\"small\"\r\n                          to=\"/management/customers/1\"\r\n                          variant=\"outlined\"\r\n                        >\r\n                          View\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n             \r\n                \r\n              </Table>\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </CardContent>\r\n        <CardActions className={classes.actions}>\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={customers.length}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n      <TableEditBar selected={selectedCustomers} />\r\n    </div>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  customers: PropTypes.array.isRequired\r\n};\r\n\r\nResults.defaultProps = {\r\n  customers: []\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport axios from 'utils/axios';\r\nimport { Page, SearchBar } from 'components';\r\nimport { Header, Results } from './components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(3)\r\n  },\r\n  results: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst CustomerManagementList = () => {\r\n  const classes = useStyles();\r\n\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const fetchCustomers = () => {\r\n      axios.get('/api/management/customers').then(response => {\r\n        if (mounted) {\r\n          setCustomers(response.data.customers);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchCustomers();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleFilter = () => {};\r\n  const handleSearch = () => {};\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Customer Management List\"\r\n    >\r\n      <Header />\r\n      <SearchBar\r\n        onFilter={handleFilter}\r\n        onSearch={handleSearch}\r\n      />\r\n      {customers && (\r\n        <Results\r\n          className={classes.results}\r\n          customers={customers}\r\n        />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default CustomerManagementList;\r\n","export { default } from './CustomerManagementList';\r\n"],"sourceRoot":""}