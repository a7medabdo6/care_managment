{"version":3,"sources":["../node_modules/@material-ui/core/esm/TablePagination/TablePaginationActions.js","../node_modules/@material-ui/core/esm/TablePagination/TablePagination.js","views/CustomerManagementList/components/Header/Header.js","views/CustomerManagementList/components/Results/Results.js","views/CustomerManagementList/CustomerManagementList.js","views/CustomerManagementList/index.js"],"names":["_ref","react_default","a","createElement","KeyboardArrowRight","_ref2","KeyboardArrowLeft","_ref3","_ref4","TablePagination_TablePaginationActions","forwardRef","props","ref","backIconButtonProps","count","nextIconButtonProps","onChangePage","page","rowsPerPage","other","Object","objectWithoutProperties","theme","useTheme","esm_extends","IconButton","onClick","event","disabled","color","direction","Math","ceil","defaultLabelDisplayedRows","from","to","concat","defaultRowsPerPageOptions","TablePagination_TablePagination","colSpan","_props$ActionsCompone","ActionsComponent","classes","colSpanProp","_props$component","component","Component","TableCell","_props$labelDisplayed","labelDisplayedRows","_props$labelRowsPerPa","labelRowsPerPage","onChangeRowsPerPage","_props$rowsPerPageOpt","rowsPerPageOptions","_props$SelectProps","SelectProps","MenuItemComponent","native","MenuItem","className","root","Toolbar","toolbar","spacer","length","Typography","variant","caption","Select","select","icon","selectIcon","input","InputBase","clsx_m","selectRoot","value","onChange","map","rowsPerPageOption","menuItem","key","min","actions","__webpack_exports__","withStyles","palette","text","secondary","fontSize","typography","pxToRem","&:last-child","padding","height","minHeight","paddingRight","flex","flexShrink","marginRight","marginLeft","paddingLeft","textAlign","textAlignLast","top","name","useStyles","makeStyles","Header","rest","assign","clsx","Grid","alignItems","container","justify","spacing","item","gutterBottom","Button","content","inner","minWidth","nameCell","display","avatar","width","justifyContent","Results","customers","_useState","useState","_useState2","slicedToArray","selectedCustomers","_useState3","_useState4","setPage","_useState5","_useState6","setRowsPerPage","Card","CardHeader","action","components","title","Divider","CardContent","lib_default","Table","TableHead","TableRow","align","TableBody","slice","customer","hover","id","selected","indexOf","Avatar","src","getInitials","Link","RouterLink","email","size","CardActions","TablePagination","target","defaultProps","results","marginTop","CustomerManagementList","setCustomers","useEffect","mounted","axios","get","then","response","data","components_Header_Header","onFilter","onSearch","components_Results_Results","__webpack_require__","d","views_CustomerManagementList_CustomerManagementList"],"mappings":"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","file":"static/js/26.2313cdb3.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport useTheme from '../styles/useTheme';\nimport IconButton from '../IconButton';\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(KeyboardArrowRight, null);\n\nvar _ref2 = React.createElement(KeyboardArrowLeft, null);\n\nvar _ref3 = React.createElement(KeyboardArrowLeft, null);\n\nvar _ref4 = React.createElement(KeyboardArrowRight, null);\n\nvar TablePaginationActions = React.forwardRef(function TablePaginationActions(props, ref) {\n  var backIconButtonProps = props.backIconButtonProps,\n      count = props.count,\n      nextIconButtonProps = props.nextIconButtonProps,\n      onChangePage = props.onChangePage,\n      page = props.page,\n      rowsPerPage = props.rowsPerPage,\n      other = _objectWithoutProperties(props, [\"backIconButtonProps\", \"count\", \"nextIconButtonProps\", \"onChangePage\", \"page\", \"rowsPerPage\"]);\n\n  var theme = useTheme();\n\n  var handleBackButtonClick = function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  };\n\n  var handleNextButtonClick = function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  };\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, other), React.createElement(IconButton, _extends({\n    onClick: handleBackButtonClick,\n    disabled: page === 0,\n    color: \"inherit\"\n  }, backIconButtonProps), theme.direction === 'rtl' ? _ref : _ref2), React.createElement(IconButton, _extends({\n    onClick: handleNextButtonClick,\n    disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n    color: \"inherit\"\n  }, nextIconButtonProps), theme.direction === 'rtl' ? _ref3 : _ref4));\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePaginationActions.propTypes = {\n  /**\n   * Props applied to the back arrow [`IconButton`](/api/icon-button/) element.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {number} page The page selected\n   */\n  onChangePage: PropTypes.func.isRequired,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: PropTypes.number.isRequired,\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired\n} : void 0;\nexport default TablePaginationActions;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@material-ui/utils';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport InputBase from '../InputBase';\nimport MenuItem from '../MenuItem';\nimport Select from '../Select';\nimport TableCell from '../TableCell';\nimport Toolbar from '../Toolbar';\nimport Typography from '../Typography';\nimport TablePaginationActions from './TablePaginationActions';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary,\n      fontSize: theme.typography.pxToRem(12),\n      // Increase the specificity to override TableCell.\n      '&:last-child': {\n        padding: 0\n      }\n    },\n\n    /* Styles applied to the Toolbar component. */\n    toolbar: {\n      height: 56,\n      minHeight: 56,\n      paddingRight: 2\n    },\n\n    /* Styles applied to the spacer element. */\n    spacer: {\n      flex: '1 1 100%'\n    },\n\n    /* Styles applied to the caption Typography components if `variant=\"caption\"`. */\n    caption: {\n      flexShrink: 0\n    },\n\n    /* Styles applied to the Select component root element. */\n    selectRoot: {\n      // `.selectRoot` should be merged with `.input` in v5.\n      marginRight: 32,\n      marginLeft: 8\n    },\n\n    /* Styles applied to the Select component `select` class. */\n    select: {\n      paddingLeft: 8,\n      paddingRight: 24,\n      textAlign: 'right',\n      textAlignLast: 'right' // Align <select> on Chrome.\n\n    },\n\n    /* Styles applied to the Select component `icon` class. */\n    selectIcon: {\n      top: 1\n    },\n\n    /* Styles applied to the `InputBase` component. */\n    input: {\n      color: 'inherit',\n      fontSize: 'inherit',\n      flexShrink: 0\n    },\n\n    /* Styles applied to the MenuItem component. */\n    menuItem: {},\n\n    /* Styles applied to the internal `TablePaginationActions` component. */\n    actions: {\n      flexShrink: 0,\n      marginLeft: 20\n    }\n  };\n};\n\nvar defaultLabelDisplayedRows = function defaultLabelDisplayedRows(_ref) {\n  var from = _ref.from,\n      to = _ref.to,\n      count = _ref.count;\n  return \"\".concat(from, \"-\").concat(to, \" of \").concat(count);\n};\n\nvar defaultRowsPerPageOptions = [10, 25, 50, 100];\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n */\n\nvar TablePagination = React.forwardRef(function TablePagination(props, ref) {\n  var _props$ActionsCompone = props.ActionsComponent,\n      ActionsComponent = _props$ActionsCompone === void 0 ? TablePaginationActions : _props$ActionsCompone,\n      backIconButtonProps = props.backIconButtonProps,\n      classes = props.classes,\n      colSpanProp = props.colSpan,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? TableCell : _props$component,\n      count = props.count,\n      _props$labelDisplayed = props.labelDisplayedRows,\n      labelDisplayedRows = _props$labelDisplayed === void 0 ? defaultLabelDisplayedRows : _props$labelDisplayed,\n      _props$labelRowsPerPa = props.labelRowsPerPage,\n      labelRowsPerPage = _props$labelRowsPerPa === void 0 ? 'Rows per page:' : _props$labelRowsPerPa,\n      nextIconButtonProps = props.nextIconButtonProps,\n      onChangePage = props.onChangePage,\n      onChangeRowsPerPage = props.onChangeRowsPerPage,\n      page = props.page,\n      rowsPerPage = props.rowsPerPage,\n      _props$rowsPerPageOpt = props.rowsPerPageOptions,\n      rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? defaultRowsPerPageOptions : _props$rowsPerPageOpt,\n      _props$SelectProps = props.SelectProps,\n      SelectProps = _props$SelectProps === void 0 ? {} : _props$SelectProps,\n      other = _objectWithoutProperties(props, [\"ActionsComponent\", \"backIconButtonProps\", \"classes\", \"colSpan\", \"component\", \"count\", \"labelDisplayedRows\", \"labelRowsPerPage\", \"nextIconButtonProps\", \"onChangePage\", \"onChangeRowsPerPage\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"SelectProps\"]);\n\n  var colSpan;\n\n  if (Component === TableCell || Component === 'td') {\n    colSpan = colSpanProp || 1000; // col-span over everything\n  }\n\n  var MenuItemComponent = SelectProps.native ? 'option' : MenuItem;\n  return React.createElement(Component, _extends({\n    className: classes.root,\n    colSpan: colSpan,\n    ref: ref\n  }, other), React.createElement(Toolbar, {\n    className: classes.toolbar\n  }, React.createElement(\"div\", {\n    className: classes.spacer\n  }), rowsPerPageOptions.length > 1 && React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"caption\",\n    className: classes.caption\n  }, labelRowsPerPage), rowsPerPageOptions.length > 1 && React.createElement(Select, _extends({\n    classes: {\n      select: classes.select,\n      icon: classes.selectIcon\n    },\n    input: React.createElement(InputBase, {\n      className: clsx(classes.input, classes.selectRoot)\n    }),\n    value: rowsPerPage,\n    onChange: onChangeRowsPerPage\n  }, SelectProps), rowsPerPageOptions.map(function (rowsPerPageOption) {\n    return React.createElement(MenuItemComponent, {\n      className: classes.menuItem,\n      key: rowsPerPageOption,\n      value: rowsPerPageOption\n    }, rowsPerPageOption);\n  })), React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"caption\",\n    className: classes.caption\n  }, labelDisplayedRows({\n    from: count === 0 ? 0 : page * rowsPerPage + 1,\n    to: Math.min(count, (page + 1) * rowsPerPage),\n    count: count,\n    page: page\n  })), React.createElement(ActionsComponent, {\n    className: classes.actions,\n    backIconButtonProps: backIconButtonProps,\n    count: count,\n    nextIconButtonProps: nextIconButtonProps,\n    onChangePage: onChangePage,\n    page: page,\n    rowsPerPage: rowsPerPage\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePagination.propTypes = {\n  /**\n   * The component used for displaying the actions.\n   * Either a string to use a DOM element or a component.\n   */\n  ActionsComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  colSpan: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Customize the displayed rows label.\n   */\n  labelDisplayedRows: PropTypes.func,\n\n  /**\n   * Customize the rows per page label. Invoked with a `{ from, to, count, page }`\n   * object.\n   */\n  labelRowsPerPage: PropTypes.node,\n\n  /**\n   * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {number} page The page selected\n   */\n  onChangePage: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onChangeRowsPerPage: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: chainPropTypes(PropTypes.number.isRequired, function (props) {\n    var count = props.count,\n        page = props.page,\n        rowsPerPage = props.rowsPerPage;\n    var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n\n    if (page < 0 || page > newLastPage) {\n      return new Error('Material-UI: the page prop of a TablePagination is out of range ' + \"(0 to \".concat(newLastPage, \", but page is \").concat(page, \").\"));\n    }\n\n    return null;\n  }),\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   */\n  rowsPerPageOptions: PropTypes.array,\n\n  /**\n   * Props applied to the rows per page [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTablePagination'\n})(TablePagination);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst Header = props => {\r\n  const { className, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <Grid\r\n        alignItems=\"flex-end\"\r\n        container\r\n        justify=\"space-between\"\r\n        spacing={3}\r\n      >\r\n        <Grid item>\r\n          <Typography\r\n            component=\"h2\"\r\n            gutterBottom\r\n            variant=\"overline\"\r\n          >\r\n            Management\r\n          </Typography>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h3\"\r\n          >\r\n            Currnt Care Plan(13)\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n          >\r\n            Add customer\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  Divider,\r\n  Button,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\n\r\nimport getInitials from 'utils/getInitials';\r\nimport { ReviewStars, GenericMoreButton, TableEditBar } from 'components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  content: {\r\n    padding: 0\r\n  },\r\n  inner: {\r\n    minWidth: 700\r\n  },\r\n  nameCell: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    height: 42,\r\n    width: 42,\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(1),\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst Results = props => {\r\n  const { className, customers, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleSelectAll = event => {\r\n    const selectedCustomers = event.target.checked\r\n      ? customers.map(customer => customer.id)\r\n      : [];\r\n\r\n    setSelectedCustomers(selectedCustomers);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedCustomers.indexOf(id);\r\n    let newSelectedCustomers = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(selectedCustomers, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(\r\n        selectedCustomers.slice(1)\r\n      );\r\n    } else if (selectedIndex === selectedCustomers.length - 1) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(\r\n        selectedCustomers.slice(0, -1)\r\n      );\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedCustomers = newSelectedCustomers.concat(\r\n        selectedCustomers.slice(0, selectedIndex),\r\n        selectedCustomers.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedCustomers(newSelectedCustomers);\r\n  };\r\n\r\n  const handleChangePage = (event, page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <Typography\r\n        color=\"textSecondary\"\r\n        gutterBottom\r\n        variant=\"body2\"\r\n      >\r\n        {customers.length} Records found. Page {page + 1} of{' '}\r\n        {Math.ceil(customers.length / rowsPerPage)}\r\n      </Typography>\r\n      <Card>\r\n        <CardHeader\r\n          action={<GenericMoreButton />}\r\n          title=\"All customers\"\r\n        />\r\n        <Divider />\r\n        <CardContent className={classes.content}>\r\n          <PerfectScrollbar>\r\n            <div className={classes.inner}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {/* <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={selectedCustomers.length === customers.length}\r\n                        color=\"primary\"\r\n                        indeterminate={\r\n                          selectedCustomers.length > 0 &&\r\n                          selectedCustomers.length < customers.length\r\n                        }\r\n                        onChange={handleSelectAll}\r\n                      />\r\n                    </TableCell> */}\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Banding</TableCell>\r\n                    <TableCell>Authority</TableCell>\r\n                    <TableCell>Food Allergies</TableCell>\r\n                    <TableCell>Medical Allergies</TableCell>\r\n                    <TableCell>Max Blood</TableCell>\r\n                    <TableCell align=\"right\">Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                \r\n                <TableBody>\r\n                  {customers.slice(0, rowsPerPage).map(customer => (\r\n                    <TableRow\r\n                      hover\r\n                      key={customer.id}\r\n                      selected={selectedCustomers.indexOf(customer.id) !== -1}\r\n                    >\r\n                      {/* <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={\r\n                            selectedCustomers.indexOf(customer.id) !== -1\r\n                          }\r\n                          color=\"primary\"\r\n                          onChange={event =>\r\n                            handleSelectOne(event, customer.id)\r\n                          }\r\n                          value={selectedCustomers.indexOf(customer.id) !== -1}\r\n                        />\r\n                      </TableCell> */}\r\n                      <TableCell>\r\n                        <div className={classes.nameCell}>\r\n                          <Avatar\r\n                            className={classes.avatar}\r\n                            src={customer.avatar}\r\n                          >\r\n                            {getInitials(customer.name)}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Link\r\n                              color=\"inherit\"\r\n                              component={RouterLink}\r\n                              to=\"/service/user\"\r\n                              variant=\"h6\"\r\n                            >\r\n                              Mohammed hassan\r\n                              {/* {customer.name} */}\r\n                            </Link>\r\n                            <div>{customer.email}</div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>9</TableCell>\r\n                      <TableCell>\r\n                        leicester\r\n                      </TableCell>\r\n                      <TableCell>None</TableCell>\r\n                      <TableCell>Pencilin</TableCell>\r\n                      <TableCell>\r\n                        90\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          component={RouterLink}\r\n                          size=\"small\"\r\n                          to=\"/management/customers/1\"\r\n                          variant=\"outlined\"\r\n                        >\r\n                          View\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n             \r\n              <TableBody>\r\n                  {customers.slice(0, rowsPerPage).map(customer => (\r\n                    <TableRow\r\n                      hover\r\n                      key={customer.id}\r\n                      selected={selectedCustomers.indexOf(customer.id) !== -1}\r\n                    >\r\n                      {/* <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={\r\n                            selectedCustomers.indexOf(customer.id) !== -1\r\n                          }\r\n                          color=\"primary\"\r\n                          onChange={event =>\r\n                            handleSelectOne(event, customer.id)\r\n                          }\r\n                          value={selectedCustomers.indexOf(customer.id) !== -1}\r\n                        />\r\n                      </TableCell> */}\r\n                       <Link to=\"/service/user\">\r\n                      <TableCell>\r\n                        <div className={classes.nameCell}>\r\n                          <Avatar\r\n                            className={classes.avatar}\r\n                            src={customer.avatar}\r\n                          >\r\n                            {getInitials(customer.name)}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Link\r\n                              color=\"inherit\"\r\n                              component={RouterLink}\r\n                              to=\"/management/customers/1\"\r\n                              variant=\"h6\"\r\n                            >\r\n                              Mohammed hassan\r\n                              {/* {customer.name} */}\r\n                            </Link>\r\n                            <div>{customer.email}</div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      </Link>\r\n                      <TableCell>9</TableCell>\r\n                      <TableCell>\r\n                        leicester\r\n                      </TableCell>\r\n                      <TableCell>None</TableCell>\r\n                      <TableCell>Pencilin</TableCell>\r\n                      <TableCell>\r\n                        90\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          component={RouterLink}\r\n                          size=\"small\"\r\n                          to=\"/management/customers/1\"\r\n                          variant=\"outlined\"\r\n                        >\r\n                          View\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n             \r\n                \r\n              </Table>\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </CardContent>\r\n        <CardActions className={classes.actions}>\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={customers.length}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n      <TableEditBar selected={selectedCustomers} />\r\n    </div>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  customers: PropTypes.array.isRequired\r\n};\r\n\r\nResults.defaultProps = {\r\n  customers: []\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport axios from 'utils/axios';\r\nimport { Page, SearchBar } from 'components';\r\nimport { Header, Results } from './components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(3)\r\n  },\r\n  results: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst CustomerManagementList = () => {\r\n  const classes = useStyles();\r\n\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const fetchCustomers = () => {\r\n      axios.get('/api/management/customers').then(response => {\r\n        if (mounted) {\r\n          setCustomers(response.data.customers);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchCustomers();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleFilter = () => {};\r\n  const handleSearch = () => {};\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Customer Management List\"\r\n    >\r\n      <Header />\r\n      <SearchBar\r\n        onFilter={handleFilter}\r\n        onSearch={handleSearch}\r\n      />\r\n      {customers && (\r\n        <Results\r\n          className={classes.results}\r\n          customers={customers}\r\n        />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default CustomerManagementList;\r\n","export { default } from './CustomerManagementList';\r\n"],"sourceRoot":""}